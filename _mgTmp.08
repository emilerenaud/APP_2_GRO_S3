   (1) %--------------------------------------------------------------------
   (2) %   Physical objects.
   (3) NewtonianFrame  N           
   (4) RigidBody       B,C               
   (5) Point           Bi(B), Bc(B), Cb(C) , Br1(B), Br2(B)
   (6) %--------------------------------------------------------------------
   (7) Variable    qB'', qC''    
   (8) Variable   Bcmx'' , Bcmy''       
   (9) Variable    Ft ,FRx ,FRy       
   (10) particle D , E
   (11) Constant TBc= 0.03 N*m*s/rad                   % Damping entre C et B
   (12) Constant b= 0.3 N*m*s/rad
   (13) constant Calpha=10.125 N/rad
   (14) Constant vTapis
   (15) Constant mE     %Masse de B
   (16) Constant mD     %Masse de B
   (17) Constant mB = 1.232 kg %Masse de B
   (18) Constant mC = 0.954 kg %Masse de C
   (19) Constant LA = 0.07 m    %Distance entre Ao et Bo
   (20) Constant LBcm = 0.242 m %Distance entre Bo et Bcm
   (21) Constant LBwb = 0.257 m %Distance entre les roues avant et arriÃ¨re selon Bx>
   (22) Constant LB = 0.472 m      %Distance entre Bo et BC/CB:				
   (23) Constant LCw = 0.206 m     %Distance entre CB et l'axe des roues du trailer
   (24) Constant LCmDE = 0.303 m   %Distance entre les masses D et E:
   (25) % inertie
   (26) Constant Ibzz = mB*(LBwb/4)^2
-> (27) Ibzz = 0.0625*mB*LBwb^2

   (28) Constant Iczz = mC*(LCmDE/4)^2
-> (29) Iczz = 0.0625*mC*LCmDE^2

   (30) %   Rotational kinematics.
   (31) B.RotateZ( N, qB )
-> (32) B_N = [cos(qB), sin(qB), 0;  -sin(qB), cos(qB), 0;  0, 0, 1]
-> (33) w_B_N> = qB'*Bz>
-> (34) alf_B_N> = qB''*Bz>

   (35) C.RotateZ( B, qC )
-> (36) C_B = [cos(qC), sin(qC), 0;  -sin(qC), cos(qC), 0;  0, 0, 1]
-> (37) w_C_B> = qC'*Cz>
-> (38) w_C_N> = (qB'+qC')*Bz>
-> (39) alf_C_B> = qC''*Cz>
-> (40) alf_C_N> = (qB''+qC'')*Bz>

   (41) %--------------------------------------------------------------------
   (42) %   Mass and inertia properties.
   (43) E.setMass(mE)
   (44) D.setMass(mD)
   (45) B.SetMass(mB)
   (46) C.SetMass(mC)
   (47) %ajoutez inertie corps b et c
   (48) B.SetInertia( Bcm,   0,   0,  Ibzz )
   (49) C.SetInertia( Ccm,   0,   0,  Iczz )
   (50) %--------------------------------------------------------------------
   (51) %B.SetAngularVelocity( N, qb'*nz> )
   (52) %C.SetAngularVelocity( B, qc'*nz> )
   (53) %--------------------------------------------------------------------
   (54) %   Position des points
   (55) Bi.Translate(No,Bcmx*Nx>+Bcmy*Ny>+LBcm*Bx>)
-> (56) p_No_Bi> = LBcm*Bx> + Bcmx*Nx> + Bcmy*Ny>
-> (57) v_Bi_N> = LBcm*qB'*By> + Bcmx'*Nx> + Bcmy'*Ny>
-> (58) a_Bi_N> = -LBcm*qB'^2*Bx> + LBcm*qB''*By> + Bcmx''*Nx> + Bcmy''*Ny>

   (59) Bcm.Translate(Bi,-LBcm*Bx>)      
-> (60) p_Bi_Bcm> = -LBcm*Bx>
-> (61) v_Bcm_N> = Bcmx'*Nx> + Bcmy'*Ny>
-> (62) a_Bcm_N> = Bcmx''*Nx> + Bcmy''*Ny>

   (63) Br1.Translate(Bcm,LBwb/2*Bx>)
-> (64) p_Bcm_Br1> = 0.5*LBwb*Bx>
-> (65) v_Br1_N> = 0.5*LBwb*qB'*By> + Bcmx'*Nx> + Bcmy'*Ny>
-> (66) a_Br1_N> = -0.5*LBwb*qB'^2*Bx> + 0.5*LBwb*qB''*By> + Bcmx''*Nx> + Bcmy''*Ny>

   (67) Br2.Translate(Bcm,-LBwb/2*Bx>)
-> (68) p_Bcm_Br2> = -0.5*LBwb*Bx>
-> (69) v_Br2_N> = -0.5*LBwb*qB'*By> + Bcmx'*Nx> + Bcmy'*Ny>
-> (70) a_Br2_N> = 0.5*LBwb*qB'^2*Bx> - 0.5*LBwb*qB''*By> + Bcmx''*Nx> + Bcmy''*Ny>

   (71) Bc.Translate(Bi, -LB*Bx>)
-> (72) p_Bi_Bc> = -LB*Bx>
-> (73) v_Bc_N> = -(LB-LBcm)*qB'*By> + Bcmx'*Nx> + Bcmy'*Ny>
-> (74) a_Bc_N> = (LB-LBcm)*qB'^2*Bx> - (LB-LBcm)*qB''*By> + Bcmx''*Nx> + Bcmy''*Ny>

   (75) Cb.translate(Bc,0>)  
-> (76) p_Bc_Cb> = 0>
-> (77) v_Cb_N> = -(LB-LBcm)*qB'*By> + Bcmx'*Nx> + Bcmy'*Ny>
-> (78) a_Cb_N> = (LB-LBcm)*qB'^2*Bx> - (LB-LBcm)*qB''*By> + Bcmx''*Nx> + Bcmy''*Ny>

   (79) Ccm.Translate(Cb,-LCw*Cx>)
-> (80) p_Cb_Ccm> = -LCw*Cx>
-> (81) v_Ccm_N> = -(LB-LBcm)*qB'*By> - LCw*(qB'+qC')*Cy> + Bcmx'*Nx> + Bcmy'*Ny>
-> (82) a_Ccm_N> = (LB-LBcm)*qB'^2*Bx> - (LB-LBcm)*qB''*By> + LCw*(qB'+qC')^2*Cx>
        - LCw*(qB''+qC'')*Cy> + Bcmx''*Nx> + Bcmy''*Ny>

   (83) E.Translate(Ccm,-LCmDE/2*Cx>)
-> (84) p_Ccm_E> = -0.5*LCmDE*Cx>
-> (85) v_E_N> = -(LB-LBcm)*qB'*By> - 0.5*(LCmDE+2*LCw)*(qB'+qC')*Cy> + Bcmx'*Nx> + Bcmy'*Ny>
-> (86) a_E_N> = (LB-LBcm)*qB'^2*Bx> - (LB-LBcm)*qB''*By> + 0.5*(LCmDE+2*LCw)*(
        qB'+qC')^2*Cx> - 0.5*(LCmDE+2*LCw)*(qB''+qC'')*Cy> + Bcmx''*Nx> + Bcmy''*Ny>

   (87) D.Translate(Ccm,LCmDE/2*Cx>)
-> (88) p_Ccm_D> = 0.5*LCmDE*Cx>
-> (89) v_D_N> = -(LB-LBcm)*qB'*By> + 0.5*(LCmDE-2*LCw)*(qB'+qC')*Cy> + Bcmx'*Nx> + Bcmy'*Ny>
-> (90) a_D_N> = (LB-LBcm)*qB'^2*Bx> - (LB-LBcm)*qB''*By> - 0.5*(LCmDE-2*LCw)*(
        qB'+qC')^2*Cx> + 0.5*(LCmDE-2*LCw)*(qB''+qC'')*Cy> + Bcmx''*Nx> + Bcmy''*Ny>

   (91) %ajoutez la vitesse du tapis (unite de getVelocity)
   (92) %Ccm.setVelocity(N,Ccm.getVelocity(N)+vTapis*Nx>)
   (93) %Br1.SetVelocity(N,Br1.GetVelocity(N)+vTapis*Nx>)
   (94) %Br2.SetVelocity(N,Br2.GetVelocity(N)+vTapis*Nx>)
   (95) %--------------------------------------------------------------------
   (96) %  Force lateral aux roues
   (97) %B1drift>=Br1.getVelocity(N)
   (98) %B2drift>=Br2.getVelocity(N)
   (99) %Cdrift>=Ccm.getVelocity(N)
   (100) alphaC=GetAngleBetweenVectors(   Ccm.getVelocity(N)+vTapis*Nx>,Cx> ,Nz>)
-> (101) alphaC = sign0IsPositive1(LCw*(qB'+qC')+sin(qB+qC)*(vTapis+Bcmx')+(LB-
         LBcm)*cos(qC)*qB'-cos(qB+qC)*Bcmy')*acos((sin(qB+qC)*Bcmy'+cos(qB+qC)*
         (vTapis+Bcmx')-(LB-LBcm)*sin(qC)*qB')/sqrt(Bcmy'^2+(vTapis+Bcmx')^2+LCw^2
         *(qB'+qC')^2+(LB-LBcm)^2*qB'^2+2*(LB-LBcm)*sin(qB)*qB'*(vTapis+Bcmx')+
         2*LCw*sin(qB+qC)*(vTapis+Bcmx')*(qB'+qC')+2*LCw*(LB-LBcm)*cos(qC)*qB'*
         (qB'+qC')-2*(LB-LBcm)*cos(qB)*Bcmy'*qB'-2*LCw*cos(qB+qC)*Bcmy'*(qB'+
         qC')))

   (102) alphaB1=GetAngleBetweenVectors(  Br1.getVelocity(N)+vTapis*Nx>,Bx>,Nz>)
-> (103) alphaB1 = sign0IsPositive1(sin(qB)*(vTapis+Bcmx')-0.5*LBwb*qB'-cos(qB)
         *Bcmy')*acos(2*(sin(qB)*Bcmy'+cos(qB)*(vTapis+Bcmx'))/sqrt(4*Bcmy'^2+LBwb^2
         *qB'^2+4*(vTapis+Bcmx')^2+4*LBwb*cos(qB)*Bcmy'*qB'-4*LBwb*sin(qB)*qB'*
         (vTapis+Bcmx')))

   (104) alphaB2=GetAngleBetweenVectors(  Br2.getVelocity(N)+vTapis*Nx>,Bx>,Nz>)
-> (105) alphaB2 = sign0IsPositive1(0.5*LBwb*qB'+sin(qB)*(vTapis+Bcmx')-cos(qB)
         *Bcmy')*acos(2*(sin(qB)*Bcmy'+cos(qB)*(vTapis+Bcmx'))/sqrt(4*Bcmy'^2+LBwb^2
         *qB'^2+4*(vTapis+Bcmx')^2+4*LBwb*sin(qB)*qB'*(vTapis+Bcmx')-4*LBwb*cos
         (qB)*Bcmy'*qB'))

   (106) Ccm.AddForce(Calpha*alphaC*Cy>)   
-> (107) Force_Ccm> = Calpha*alphaC*Cy>

   (108) Br1.addForce((Calpha*alphaB1)*By>)
-> (109) Force_Br1> = Calpha*alphaB1*By>

   (110) Br2.addForce((Calpha*alphaB2)*By>)
-> (111) Force_Br2> = Calpha*alphaB2*By>

   (112) %Force au pivot Cb/Bc
   (113) %Forces de reaction
   (114) Cb.AddForce(-FRx*Bx>-FRy*By> )    
-> (115) Force_Cb> = -FRx*Bx> - FRy*By>

   (116) Bc.AddForce(FRx*Bx>+FRy*By> ) 
-> (117) Force_Bc> = FRx*Bx> + FRy*By>

   (118) %frottement visqueux
   (119) B.AddTorque(C,TBc*qc'*nz>)
-> (120) Torque_B_C> = TBc*qC'*Nz>

   (121) %sys scafai
   (122) %B.AddTorque(-b*qB'*nz>)
   (123) %tension de la corde
   (124) vUnitCorde>=getUnitVector(No.getPosition(Bi))  
-> (125) vUnitCorde> = -LBcm/sqrt(LBcm^2+Bcmx^2+Bcmy^2+2*LBcm*Bcmx*cos(qB)+2*
         LBcm*Bcmy*sin(qB))*Bx> - Bcmx/sqrt(LBcm^2+Bcmx^2+Bcmy^2+2*LBcm*Bcmx*
         cos(qB)+2*LBcm*Bcmy*sin(qB))*Nx> - Bcmy/sqrt(LBcm^2+Bcmx^2+Bcmy^2+2*
         LBcm*Bcmx*cos(qB)+2*LBcm*Bcmy*sin(qB))*Ny>

   (126) Bi.AddForce(Ft*vUnitCorde>)
-> (127) Force_Bi> = -LBcm*Ft/sqrt(LBcm^2+Bcmx^2+Bcmy^2+2*LBcm*Bcmx*cos(qB)+2*
         LBcm*Bcmy*sin(qB))*Bx> - Bcmx*Ft/sqrt(LBcm^2+Bcmx^2+Bcmy^2+2*LBcm*Bcmx
         *cos(qB)+2*LBcm*Bcmy*sin(qB))*Nx> - Bcmy*Ft/sqrt(LBcm^2+Bcmx^2+Bcmy^2+
         2*LBcm*Bcmx*cos(qB)+2*LBcm*Bcmy*sin(qB))*Ny>

   (128) Variable W_Fw' = Br1.GetPowerForce() 
-> (129) W_Fw' = -0.5*Calpha*(2*sin(qB)*Bcmx'-LBwb*qB'-2*cos(qB)*Bcmy')*alphaB1

   (130) Variable W_Rw' = Br2.GetPowerForce()
-> (131) W_Rw' = -0.5*Calpha*(LBwb*qB'+2*sin(qB)*Bcmx'-2*cos(qB)*Bcmy')*alphaB2

   (132) Variable W_Ccm' = Ccm.GetPowerForce()
-> (133) W_Ccm' = Calpha*(cos(qB+qC)*Bcmy'-LCw*(qB'+qC')-sin(qB+qC)*Bcmx'-(LB-
         LBcm)*cos(qC)*qB')*alphaC

   (134) Variable W_Bo' = Bo.GetPowerForce()
-> (135) W_Bo' = 0

   (136) Variable W_Bc' = Bc.GetPowerForce()
-> (137) W_Bc' = FRx*sin(qB)*Bcmy' + FRx*cos(qB)*Bcmx' + FRy*cos(qB)*Bcmy'
         - FRy*sin(qB)*Bcmx' - (LB-LBcm)*FRy*qB'

   (138) Variable W_Cb' = Co.GetPowerForce()
-> (139) W_Cb' = 0

   (140) Variable W_Bc_t' = B.GetPowerTorque(C)
-> (141) W_Bc_t' = -TBc*qC'^2

   (142) Variable W_Cb_t' = C.GetPowerTorque(B)
-> (143) W_Cb_t' = 0

   (144) Variable workSystem' = System.GetPower()
-> (145) workSystem' = Ft*(LBcm*Bcmx*sin(qB)*qB'-Bcmx*Bcmx'-Bcmy*Bcmy'-LBcm*sin
         (qB)*Bcmy'-LBcm*cos(qB)*Bcmx'-LBcm*Bcmy*cos(qB)*qB')/sqrt(LBcm^2+Bcmx^2
         +Bcmy^2+2*LBcm*Bcmx*cos(qB)+2*LBcm*Bcmy*sin(qB)) + Calpha*(cos(qB+qC)*
         Bcmy'-LCw*(qB'+qC')-sin(qB+qC)*Bcmx'-(LB-LBcm)*cos(qC)*qB')*alphaC
         - TBc*qC'^2 - 0.5*Calpha*(LBwb*qB'+2*sin(qB)*Bcmx'-2*cos(qB)*Bcmy')*alphaB2
         - 0.5*Calpha*(2*sin(qB)*Bcmx'-LBwb*qB'-2*cos(qB)*Bcmy')*alphaB1

   (146) Variable kineticSystem = System.GetKineticEnergy(N)
-> (147) kineticSystem = 0.5*Ibzz*qB'^2 + 0.5*Iczz*(qB'+qC')^2 + 0.5*mB*(Bcmx'^2
         +Bcmy'^2) + 0.125*mD*(4*Bcmx'^2+4*Bcmy'^2+4*(LB-LBcm)^2*qB'^2+(LCmDE-2
         *LCw)^2*(qB'+qC')^2+8*(LB-LBcm)*sin(qB)*Bcmx'*qB'+4*(LCmDE-2*LCw)*cos(
         qB+qC)*Bcmy'*(qB'+qC')-8*(LB-LBcm)*cos(qB)*Bcmy'*qB'-4*(LCmDE-2*LCw)*
         sin(qB+qC)*Bcmx'*(qB'+qC')-4*(LB-LBcm)*(LCmDE-2*LCw)*cos(qC)*qB'*(qB'+
         qC')) - 0.5*mC*(2*(LB-LBcm)*cos(qB)*Bcmy'*qB'+2*LCw*cos(qB+qC)*Bcmy'*(
         qB'+qC')-Bcmx'^2-Bcmy'^2-LCw^2*(qB'+qC')^2-(LB-LBcm)^2*qB'^2-2*(LB-LB
         cm)*sin(qB)*Bcmx'*qB'-2*LCw*sin(qB+qC)*Bcmx'*(qB'+qC')-2*LCw*(LB-LBcm)
         *cos(qC)*qB'*(qB'+qC')) - 0.125*mE*(8*(LB-LBcm)*cos(qB)*Bcmy'*qB'+4*(
         LCmDE+2*LCw)*cos(qB+qC)*Bcmy'*(qB'+qC')-4*Bcmx'^2-4*Bcmy'^2-4*(LB-LBcm)^2
         *qB'^2-8*(LB-LBcm)*sin(qB)*Bcmx'*qB'-(LCmDE+2*LCw)^2*(qB'+qC')^2-4*(
         LCmDE+2*LCw)*sin(qB+qC)*Bcmx'*(qB'+qC')-4*(LB-LBcm)*(LCmDE+2*LCw)*cos(
         qC)*qB'*(qB'+qC'))

   (148) Variable constante_travail =  kineticSystem - workSystem
-> (149) constante_travail = kineticSystem - workSystem

   (150) %--------------------------------------------------------------------
   (151) %   Dynamic equations of motion (F = m*a).
   (152) %   For static analysis, use B.GetStatics() or System.GetStatics().
   (153) system CDE(C,D,E)
   (154) Dynamics[1] = Dot(  B.GetDynamics(),  Nx>  )
-> (155) Dynamics[1] = Bcmx*Ft/sqrt(LBcm^2+Bcmx^2+Bcmy^2+2*LBcm*Bcmx*cos(qB)+2*
         LBcm*Bcmy*sin(qB)) + sin(qB)*(FRy+Calpha*alphaB1+Calpha*alphaB2)
         + mB*Bcmx'' - cos(qB)*(FRx-LBcm*Ft/sqrt(LBcm^2+Bcmx^2+Bcmy^2+2*LBcm*
         Bcmx*cos(qB)+2*LBcm*Bcmy*sin(qB)))

   (156) Dynamics[2] = Dot(  B.GetDynamics(),  Ny>  )
-> (157) Dynamics[2] = Bcmy*Ft/sqrt(LBcm^2+Bcmx^2+Bcmy^2+2*LBcm*Bcmx*cos(qB)+2*
         LBcm*Bcmy*sin(qB)) + mB*Bcmy'' - sin(qB)*(FRx-LBcm*Ft/sqrt(LBcm^2+Bcmx^2
         +Bcmy^2+2*LBcm*Bcmx*cos(qB)+2*LBcm*Bcmy*sin(qB))) - cos(qB)*(FRy+Calp
         ha*alphaB1+Calpha*alphaB2)

   (158) Dynamics[3] = Dot(  CDE.GetDynamics(),  Nx>  )
-> (159) Dynamics[3] = cos(qB)*(FRx+mC*(LB-LBcm)*qB'^2+mD*(LB-LBcm)*qB'^2+mE*(
         LB-LBcm)*qB'^2) + (mC+mD+mE)*Bcmx'' - 0.5*(mD*(LCmDE-2*LCw)-2*LCw*mC-
         mE*(LCmDE+2*LCw))*cos(qB+qC)*(qB'+qC')^2 - sin(qB)*(FRy-mC*(LB-LBcm)*
         qB''-mD*(LB-LBcm)*qB''-mE*(LB-LBcm)*qB'') - 0.5*sin(qB+qC)*(mD*(LCmDE-
         2*LCw)*(qB''+qC'')-2*Calpha*alphaC-2*LCw*mC*(qB''+qC'')-mE*(LCmDE+2*
         LCw)*(qB''+qC''))

   (160) Dynamics[4] = Dot(  CDE.GetDynamics(),  Ny>  )
-> (161) Dynamics[4] = sin(qB)*(FRx+mC*(LB-LBcm)*qB'^2+mD*(LB-LBcm)*qB'^2+mE*(
         LB-LBcm)*qB'^2) + (mC+mD+mE)*Bcmy'' + cos(qB)*(FRy-mC*(LB-LBcm)*qB''-
         mD*(LB-LBcm)*qB''-mE*(LB-LBcm)*qB'') + 0.5*cos(qB+qC)*(mD*(LCmDE-2*LCw)
         *(qB''+qC'')-2*Calpha*alphaC-2*LCw*mC*(qB''+qC'')-mE*(LCmDE+2*LCw)*(
         qB''+qC'')) - 0.5*(mD*(LCmDE-2*LCw)-2*LCw*mC-mE*(LCmDE+2*LCw))*sin(qB+
         qC)*(qB'+qC')^2

   (162) Dynamics[5] = Dot(  CDE.GetDynamics(Ccm),  Nz>  )
-> (163) Dynamics[5] = LCw*FRy*cos(qC) + TBc*qC' + 0.5*LCmDE*mE*(LB-LBcm)*sin(
         qC)*qB'^2 + Iczz*(qB''+qC'') + 0.5*LCmDE*mD*cos(qB+qC)*Bcmy'' + 0.5*
         LCmDE*mE*sin(qB+qC)*Bcmx'' + 0.25*LCmDE*mD*(LCmDE-2*LCw)*(qB''+qC'')
         + 0.25*LCmDE*mE*(LCmDE+2*LCw)*(qB''+qC'') + 0.5*LCmDE*mE*(LB-LBcm)*cos
         (qC)*qB'' - LCw*FRx*sin(qC) - 0.5*LCmDE*mD*(LB-LBcm)*sin(qC)*qB'^2
         - 0.5*LCmDE*mD*sin(qB+qC)*Bcmx'' - 0.5*LCmDE*mE*cos(qB+qC)*Bcmy''
         - 0.5*LCmDE*mD*(LB-LBcm)*cos(qC)*qB''

   (164) Dynamics[6] = Dot(  B.GetDynamics(Bcm),  Nz>  )
-> (165) Dynamics[6] = (LB-LBcm)*FRy + 0.5*Calpha*LBwb*alphaB2 + Ibzz*qB''
         - LBcm*Ft*(Bcmx*sin(qB)-Bcmy*cos(qB))/sqrt(LBcm^2+Bcmx^2+Bcmy^2+2*LBcm
         *Bcmx*cos(qB)+2*LBcm*Bcmy*sin(qB)) - TBc*qC' - 0.5*Calpha*LBwb*alphaB1

   (166) Dynamics[7] = dt(dt(No.getDistance(Bi)-LA))
-> (167) Dynamics[7] = -((LBcm*Bcmx*sin(qB)*qB'-Bcmx*Bcmx'-Bcmy*Bcmy'-LBcm*sin(
         qB)*Bcmy'-LBcm*cos(qB)*Bcmx'-LBcm*Bcmy*cos(qB)*qB')^2-(LBcm^2+Bcmx^2+Bcmy^2
         +2*LBcm*Bcmx*cos(qB)+2*LBcm*Bcmy*sin(qB))*(Bcmx'^2+Bcmy'^2+2*LBcm*cos(
         qB)*Bcmy'*qB'+Bcmx*Bcmx''+Bcmy*Bcmy''+LBcm*sin(qB)*Bcmy''+LBcm*cos(qB)
         *Bcmx''-2*LBcm*sin(qB)*Bcmx'*qB'-LBcm*Bcmx*(cos(qB)*qB'^2+sin(qB)*qB'')
         -LBcm*Bcmy*(sin(qB)*qB'^2-cos(qB)*qB'')))/(LBcm^2+Bcmx^2+Bcmy^2+2*LBcm
         *Bcmx*cos(qB)+2*LBcm*Bcmy*sin(qB))^1.5

   (168) %--------------------------------------------------------------------
   (169) %   Initial values 
   (170) %cas 1 --------------------------------------------------------------------
   (171) %Input  qC =22 deg,  qC' = -72 deg/sec , Bcmx=-0.29199 m , Bcmx'= 0.052696 m/s
   (172) %Input  qB = -16 deg,  qB' = -3 deg/sec , Bcmy=0.02961 m, Bcmy'= -0.066562 m/s
   (173) %Input  vTapis= 3 mph, mE=0 kg, mD=0.192 kg 
   (174) %cas 2 --------------------------------------------------------------------
   (175) %Input  Bcmx = -0.28944 m , Bcmy = 0.043787 m ,Bcmx' = 0.077596 m/s, Bcmy' = 0.018608 m/s
   (176) %Input qB = -19 deg, qC = 30 deg
   (177) %Input qB' = -24 deg/s, qC' = -33 deg/s
   (178) %Input  vTapis= 3 mph, mD=0 kg, mE=0.192 kg 
   (179) %cas 3 --------------------------------------------------------------------
   (180) %input Bcmx = -0.29901 m , Bcmy = -0.0034145 m , Bcmx' = 0.057398 m/s ,  Bcmy' = -0.18408 m/s
   (181) %input qB = -8 deg, qC = 7 deg
   (182) %input qB' = 18 deg/sec, qC' = -86 (deg/s)
   (183) %Input  vTapis= 5 mph, mE=0 kg, mD=0.192 kg 
   (184) %cas 4 --------------------------------------------------------------------
   (185) input Bcmx = -0.29975 m , Bcmy = 0.025967 m , Bcmx' = 0.079762 m/s , Bcmy' = 0.13957 m/s
   (186) input qB = -13 deg , qC = 25 deg
   (187) input qB' = -51 deg/s , qC' = 23 (deg/s)
   (188) Input  vTapis= 5 mph, mD=0 kg, mE=0.192 kg 
   (189) %cas 5 --------------------------------------------------------------------
   (190) %input Bcmx = -0.29975 m , Bcmy = 0.025967 m , Bcmx' = 0.079762 m/s , Bcmy' = 0.13957 m/s
   (191) %input qB = -13 deg , qC = 25 deg
   (192) %input qB' = -51 deg/s , qC' = 23 (deg/s)
   (193) %Input  vTapis= 5 mph, mD=0 kg, mE=0.192 kg 
   (194) %cas 6 --------------------------------------------------------------------
   (195) %input Bcmx = -0.29975 m , Bcmy = 0.025967 m , Bcmx' = 0.079762 m/s , Bcmy' = 0.13957 m/s
   (196) %input qB = -13 deg , qC = 25 deg
   (197) %input qB' = -51 deg/s , qC' = 23 (deg/s)
   (198) %Input  vTapis= 5 mph, mD=0 kg, mE=0.192 kg 
   (199) %cas 7 --------------------------------------------------------------------
   (200) %input Bcmx = -0.29975 m , Bcmy = 0.025967 m , Bcmx' = 0.079762 m/s , Bcmy' = 0.13957 m/s
   (201) %input qB = -13 deg , qC = 25 deg
   (202) %input qB' = -51 deg/s , qC' = 23 (deg/s)
   (203) %Input  vTapis= 5 mph, mD=0 kg, mE=0.192 kg 
   (204) %cas 8 --------------------------------------------------------------------
   (205) %input Bcmx = -0.29975 m , Bcmy = 0.025967 m , Bcmx' = 0.079762 m/s , Bcmy' = 0.13957 m/s
   (206) %input qB = -13 deg , qC = 25 deg
   (207) %input qB' = -51 deg/s , qC' = 23 (deg/s)
   (208) %Input  vTapis= 5 mph, mD=0 kg, mE=0.192 kg 
   (209) % fonction pour caplha de 40 ===== Input  tFinal = 3 sec,  tStep = 0.1 sec,  absError = 1.0E-03
   (210) Input  tFinal = 2.5 sec,  tStep = 0.01 sec,  absError = 1.0E-5
   (211) %OutputPlot  t sec, qc deg , qb deg
   (212) %OutputPlot t sec, W_Fw J, W_Rw J, W_Bo J, W_Bc J, W_Cb J, W_Bc_t J, W_Cb_t J, W_Ccm J
   (213) %OutputPlot t sec, constante_travail,  workSystem J, kineticSystem J
   (214) OutputPlot t sec, Frx, Fry
   (215) ODE(Dynamics, Bcmx'',Bcmy'', qb'', qc'', Ft, FRx,FRy )  

   (216) quit
